name: parachain

on:
  push:
    paths:
      - "parachain/**"
      - "!parachain/README.md"
      - "!parachain/LICENSE"
    branches:
      - main
  pull_request:
    paths:
      - "parachain/**"
      - "!parachain/README.md"
      - "!parachain/LICENSE"

jobs:
  fmt:
    runs-on: ubuntu-22.04
    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: 1
      RUSTFLAGS: -C debuginfo=1
      SKIP_WASM_BUILD: 1
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('parachain/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2023-02-06
          target: wasm32-unknown-unknown
          components: rustfmt
      - name: cargo fmt
        run: cd parachain && cargo +nightly fmt -- --check --config-path rustfmt.toml && cd -

  check:
    runs-on: ubuntu-22.04
    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: 1
      RUSTFLAGS: -C debuginfo=1
      SKIP_WASM_BUILD: 1
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('parachain/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: install protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.69.0
          target: wasm32-unknown-unknown
      - name: cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          toolchain: 1.69.0
          args: >-
            --manifest-path parachain/Cargo.toml
            --workspace
            --features runtime-benchmarks

  test:
    needs: check
    runs-on: ubuntu-22.04
    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: 1
      RUSTFLAGS: -C debuginfo=1
      SKIP_WASM_BUILD: 1
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - uses: actions/cache@v1
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('parachain/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.69.0
          target: wasm32-unknown-unknown
      - uses: actions-rs/install@v0.1.2
        with:
          crate: cargo-tarpaulin
          version: latest
          use-tool-cache: true
      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: tarpaulin
          args: >-
            --manifest-path parachain/Cargo.toml
            --verbose --workspace
            --features runtime-benchmarks
            --avoid-cfg-tarpaulin
            --coveralls ${{ secrets.COVERALLS_REPO_TOKEN }}
          toolchain: 1.69.0
