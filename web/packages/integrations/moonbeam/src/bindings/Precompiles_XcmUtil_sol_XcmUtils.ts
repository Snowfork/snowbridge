/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace XcmUtils {
  export type MultilocationStruct = {
    parents: BigNumberish;
    interior: BytesLike[];
  };

  export type MultilocationStructOutput = [
    parents: bigint,
    interior: string[]
  ] & { parents: bigint; interior: string[] };
}

export interface Precompiles_XcmUtil_sol_XcmUtilsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getUnitsPerSecond"
      | "multilocationToAddress"
      | "weightMessage"
      | "xcmExecute"
      | "xcmSend"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getUnitsPerSecond",
    values: [XcmUtils.MultilocationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "multilocationToAddress",
    values: [XcmUtils.MultilocationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "weightMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "xcmExecute",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "xcmSend",
    values: [XcmUtils.MultilocationStruct, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getUnitsPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multilocationToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weightMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xcmExecute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xcmSend", data: BytesLike): Result;
}

export interface Precompiles_XcmUtil_sol_XcmUtils extends BaseContract {
  connect(runner?: ContractRunner | null): Precompiles_XcmUtil_sol_XcmUtils;
  waitForDeployment(): Promise<this>;

  interface: Precompiles_XcmUtil_sol_XcmUtilsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getUnitsPerSecond: TypedContractMethod<
    [multilocation: XcmUtils.MultilocationStruct],
    [bigint],
    "view"
  >;

  multilocationToAddress: TypedContractMethod<
    [multilocation: XcmUtils.MultilocationStruct],
    [string],
    "view"
  >;

  weightMessage: TypedContractMethod<[message: BytesLike], [bigint], "view">;

  xcmExecute: TypedContractMethod<
    [message: BytesLike, maxWeight: BigNumberish],
    [void],
    "nonpayable"
  >;

  xcmSend: TypedContractMethod<
    [dest: XcmUtils.MultilocationStruct, message: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getUnitsPerSecond"
  ): TypedContractMethod<
    [multilocation: XcmUtils.MultilocationStruct],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "multilocationToAddress"
  ): TypedContractMethod<
    [multilocation: XcmUtils.MultilocationStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "weightMessage"
  ): TypedContractMethod<[message: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "xcmExecute"
  ): TypedContractMethod<
    [message: BytesLike, maxWeight: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "xcmSend"
  ): TypedContractMethod<
    [dest: XcmUtils.MultilocationStruct, message: BytesLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
