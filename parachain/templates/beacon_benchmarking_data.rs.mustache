// Generated, do not edit!
// See README.md for instructions to generate
use frame_support::traits::Get;
use hex_literal::hex;
use snowbridge_beacon_primitives::{
    Attestation, AttestationData, BeaconBlock, BeaconHeader, BlockUpdate, Body, Checkpoint,
    Eth1Data, ExecutionPayload, FinalizedHeaderUpdate, InitialSync, PublicKey, SyncAggregate,
    SyncCommittee, SyncCommitteePeriodUpdate,
};
use sp_core::U256;
use sp_std::vec;

pub fn initial_sync<SyncCommitteeSize: Get<u32>, ProofSize: Get<u32>>(
    ) -> InitialSync<SyncCommitteeSize, ProofSize> {
    let time_now = 1675679352; //2023.2.6

    return InitialSync{
        header: BeaconHeader{
            slot: {{InitialSync.Header.Slot}},
            proposer_index: {{InitialSync.Header.ProposerIndex}},
            parent_root: hex!("{{InitialSync.Header.ParentRoot}}").into(),
            state_root: hex!("{{InitialSync.Header.StateRoot}}").into(),
            body_root: hex!("{{InitialSync.Header.BodyRoot}}").into(),
        },
        current_sync_committee: SyncCommittee{
            pubkeys: vec![
            {{#InitialSync.CurrentSyncCommittee.Pubkeys}}
                PublicKey(hex!("{{.}}").into()),
            {{/InitialSync.CurrentSyncCommittee.Pubkeys}}
            ].try_into().expect("too many pubkeys"),
            aggregate_pubkey: PublicKey(hex!("{{InitialSync.CurrentSyncCommittee.AggregatePubkey}}").into())
        },
        current_sync_committee_branch: vec![
            {{#InitialSync.CurrentSyncCommitteeBranch}}
                hex!("{{.}}").into(),
            {{/InitialSync.CurrentSyncCommitteeBranch}}
        ].try_into().expect("too many branch proof items"),
        validators_root: hex!("{{InitialSync.ValidatorsRoot}}").into(),
        import_time: time_now + 97200, // now + 27 hour sync committee period
    };
}

pub fn sync_committee_update<
    SignatureSize: Get<u32>,
    ProofSize: Get<u32>,
    SyncCommitteeSize: Get<u32>,
>() -> SyncCommitteePeriodUpdate<SignatureSize, ProofSize, SyncCommitteeSize> {
    return SyncCommitteePeriodUpdate {
        attested_header: BeaconHeader {
            slot: {{SyncCommitteeUpdate.AttestedHeader.Slot}},
            proposer_index: {{SyncCommitteeUpdate.AttestedHeader.ProposerIndex}},
            parent_root: hex!("{{SyncCommitteeUpdate.AttestedHeader.ParentRoot}}").into(),
            state_root: hex!("{{SyncCommitteeUpdate.AttestedHeader.StateRoot}}").into(),
            body_root: hex!("{{SyncCommitteeUpdate.AttestedHeader.BodyRoot}}").into(),
        },
        next_sync_committee: SyncCommittee {
            pubkeys: vec![
            {{#SyncCommitteeUpdate.NextSyncCommittee.Pubkeys}}
                PublicKey(hex!("{{.}}").into()),
            {{/SyncCommitteeUpdate.NextSyncCommittee.Pubkeys}}
            ].try_into().expect("too many pubkeys"),
            aggregate_pubkey: PublicKey(hex!("{{SyncCommitteeUpdate.NextSyncCommittee.AggregatePubkey}}").into())
        },
        next_sync_committee_branch: vec![
        {{#SyncCommitteeUpdate.NextSyncCommitteeBranch}}
            hex!("{{.}}").into(),
        {{/SyncCommitteeUpdate.NextSyncCommitteeBranch}}
        ].try_into().expect("too many branch proof items"),
        finalized_header: BeaconHeader{
            slot: {{SyncCommitteeUpdate.FinalizedHeader.Slot}},
            proposer_index: {{SyncCommitteeUpdate.FinalizedHeader.ProposerIndex}},
            parent_root: hex!("{{SyncCommitteeUpdate.FinalizedHeader.ParentRoot}}").into(),
            state_root: hex!("{{SyncCommitteeUpdate.FinalizedHeader.StateRoot}}").into(),
            body_root: hex!("{{SyncCommitteeUpdate.FinalizedHeader.BodyRoot}}").into(),
        },
        finality_branch: vec![
        {{#SyncCommitteeUpdate.FinalityBranch}}
            hex!("{{.}}").into(),
        {{/SyncCommitteeUpdate.FinalityBranch}}
        ].try_into().expect("too many branch proof items"),
        sync_aggregate: SyncAggregate{
            sync_committee_bits: hex!("{{SyncCommitteeUpdate.SyncAggregate.SyncCommitteeBits}}").to_vec().try_into().expect("too many sync committee bits"),
            sync_committee_signature: hex!("{{SyncCommitteeUpdate.SyncAggregate.SyncCommitteeSignature}}").to_vec().try_into().expect("signature too long"),
        },
        sync_committee_period: {{SyncCommitteeUpdate.SyncCommitteePeriod}},
        signature_slot: {{SyncCommitteeUpdate.SignatureSlot}},
        block_roots_hash: hex!("{{SyncCommitteeUpdate.BlockRootsHash}}").into(),
        block_roots_proof: vec![
        {{#SyncCommitteeUpdate.BlockRootProof}}
            hex!("{{.}}").into(),
        {{/SyncCommitteeUpdate.BlockRootProof}}
        ].try_into().expect("too many branch proof items"),
    };
}

pub fn finalized_header_update<
    SignatureSize: Get<u32>,
    ProofSize: Get<u32>,
    SyncCommitteeSize: Get<u32>,
>() -> FinalizedHeaderUpdate<SignatureSize, ProofSize, SyncCommitteeSize> {
    return FinalizedHeaderUpdate{
        attested_header: BeaconHeader {
            slot: {{FinalizedHeaderUpdate.AttestedHeader.Slot}},
            proposer_index: {{FinalizedHeaderUpdate.AttestedHeader.ProposerIndex}},
            parent_root: hex!("{{FinalizedHeaderUpdate.AttestedHeader.ParentRoot}}").into(),
            state_root: hex!("{{FinalizedHeaderUpdate.AttestedHeader.StateRoot}}").into(),
            body_root: hex!("{{FinalizedHeaderUpdate.AttestedHeader.BodyRoot}}").into(),
        },
        finalized_header: BeaconHeader{
            slot: {{FinalizedHeaderUpdate.FinalizedHeader.Slot}},
            proposer_index: {{FinalizedHeaderUpdate.FinalizedHeader.ProposerIndex}},
            parent_root: hex!("{{FinalizedHeaderUpdate.FinalizedHeader.ParentRoot}}").into(),
            state_root: hex!("{{FinalizedHeaderUpdate.FinalizedHeader.StateRoot}}").into(),
            body_root: hex!("{{FinalizedHeaderUpdate.FinalizedHeader.BodyRoot}}").into(),
        },
        finality_branch: vec![
        {{#FinalizedHeaderUpdate.FinalityBranch}}
            hex!("{{.}}").into(),
        {{/FinalizedHeaderUpdate.FinalityBranch}}
        ].try_into().expect("too many branch proof items"),
        sync_aggregate: SyncAggregate{
            sync_committee_bits: hex!("{{FinalizedHeaderUpdate.SyncAggregate.SyncCommitteeBits}}").to_vec().try_into().expect("too many sync committee bits"),
            sync_committee_signature: hex!("{{FinalizedHeaderUpdate.SyncAggregate.SyncCommitteeSignature}}").to_vec().try_into().expect("signature too long"),
        },
        signature_slot: {{FinalizedHeaderUpdate.SignatureSlot}},
        block_roots_hash: hex!("{{FinalizedHeaderUpdate.BlockRootsHash}}").into(),
        block_roots_proof: vec![
        {{#FinalizedHeaderUpdate.BlockRootProof}}
            hex!("{{.}}").into(),
        {{/FinalizedHeaderUpdate.BlockRootProof}}
        ].try_into().expect("too many branch proof items")
    };
}

pub fn header_update<
    FeeRecipientSize: Get<u32>,
    LogsBloomSize: Get<u32>,
    ExtraDataSize: Get<u32>,
    SignatureSize: Get<u32>,
    ProofSize: Get<u32>,
    SyncCommitteeSize: Get<u32>,
>() -> HeaderUpdate<
    FeeRecipientSize,
    LogsBloomSize,
    ExtraDataSize,
    SignatureSize,
    ProofSize,
    SyncCommitteeSize,
> {
    return HeaderUpdate{
        beacon_header: BeaconBlock{
            slot: {{HeaderUpdate.Payload.BeaconHeader.Slot}},
            proposer_index: {{HeaderUpdate.Payload.BeaconHeader.ProposerIndex}},
            parent_root: hex!("{{HeaderUpdate.Payload.BeaconHeader.ParentRoot}}").into(),
            state_root: hex!("{{HeaderUpdate.Payload.BeaconHeader.StateRoot}}").into(),
            body_root: hex!("{{HeaderUpdate.Payload.BeaconHeader.BodyRoot}}").into(),
        },
        execution_payload: ExecutionPayload{
            parent_hash: hex!("{{HeaderUpdate.Payload.ExecutionPayload.ParentHash}}").into(),
            fee_recipient: hex!("{{HeaderUpdate.Payload.ExecutionPayload.FeeRecipient}}").to_vec().try_into().expect("fee recipient too long"),
            state_root: hex!("{{HeaderUpdate.Payload.ExecutionPayload.StateRoot}}").into(),
            receipts_root: hex!("{{HeaderUpdate.Payload.ExecutionPayload.ReceiptsRoot}}").into(),
            logs_bloom: hex!("{{HeaderUpdate.Payload.ExecutionPayload.LogsBloom}}").to_vec().try_into().expect("logs bloom too long"),
            prev_randao: hex!("{{HeaderUpdate.Payload.ExecutionPayload.PrevRandao}}").into(),
            block_number: {{HeaderUpdate.Payload.ExecutionPayload.BlockNumber}},
            gas_limit: {{HeaderUpdate.Payload.ExecutionPayload.GasLimit}},
            gas_used: {{HeaderUpdate.Payload.ExecutionPayload.GasUsed}},
            timestamp: {{HeaderUpdate.Payload.ExecutionPayload.Timestamp}},
            extra_data: hex!("{{HeaderUpdate.Payload.ExecutionPayload.ExtraData}}").to_vec().try_into().expect("extra data too long"),
            base_fee_per_gas: U256::from({{HeaderUpdate.Payload.ExecutionPayload.BaseFeePerGas}} as u64),
            block_hash: hex!("{{HeaderUpdate.Payload.ExecutionPayload.BlockHash}}").into(),
            transactions_root: hex!("{{HeaderUpdate.Payload.ExecutionPayload.TransactionRoot}}").into(),
        },
        execution_branch: vec![
        {{#HeaderUpdate.Payload.ExecutionBranch}}
            hex!("{{.}}").into(),
        {{/HeaderUpdate.Payload.ExecutionBranch}}
        ].try_into().expect("too many branch proof items"),
        sync_aggregate: SyncAggregate{
            sync_committee_bits: hex!("{{HeaderUpdate.Payload.SyncAggregate.SyncCommitteeBits}}").to_vec().try_into().expect("too many sync committee bits"),
            sync_committee_signature: hex!("{{HeaderUpdate.Payload.SyncAggregate.SyncCommitteeSignature}}").to_vec().try_into().expect("signature too long"),
        },
        signature_slot: {{HeaderUpdate.Payload.SignatureSlot}},
        block_root_branch: vec![
        {{#HeaderUpdate.Payload.BlockRootProof}}
            hex!("{{.}}").into(),
        {{/HeaderUpdate.Payload.BlockRootProof}}
        ].try_into().expect("too many branch proof items"),
        block_root_branch_header_root: hex!("{{HeaderUpdate.Payload.BlockRootProofFinalizedHeader}}").into(),
    };
}
