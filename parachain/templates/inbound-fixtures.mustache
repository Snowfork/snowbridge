// Generated, do not edit!
// See ethereum client README.md for instructions to generate
use hex_literal::hex;
use snowbridge_beacon_primitives::CompactExecutionHeader;
use snowbridge_core::inbound::{Log, Message, Proof};
use sp_std::vec;

pub struct InboundQueueTest {
    pub execution_header: CompactExecutionHeader,
    pub message: Message,
}

pub fn make_create_message() -> InboundQueueTest {
    InboundQueueTest {
        execution_header: CompactExecutionHeader{
            parent_hash: hex!("{{InboundMessageTest.ExecutionHeader.ParentHash}}").into(),
            block_number: {{InboundMessageTest.ExecutionHeader.BlockNumber}},
            state_root: hex!("{{InboundMessageTest.ExecutionHeader.StateRoot}}").into(),
            receipts_root: hex!("{{InboundMessageTest.ExecutionHeader.ReceiptsRoot}}").into(),
        },
        message: Message {
            event_log: 	Log {
                address: hex!("{{InboundMessageTest.Message.EventLog.Address}}").into(),
                topics: vec![
                {{#InboundMessageTest.Message.EventLog.Topics}}
                    hex!("{{.}}").into(),
                {{/InboundMessageTest.Message.EventLog.Topics}}
                ],
                data: hex!("{{InboundMessageTest.Message.EventLog.Data}}").into(),
            },
            proof: Proof {
                block_hash: hex!("{{InboundMessageTest.Message.Proof.BlockHash}}").into(),
                tx_index: {{InboundMessageTest.Message.Proof.TxIndex}},
                data: (vec![
                {{#InboundMessageTest.Message.Proof.Data.Keys}}
                    hex!("{{.}}").to_vec(),
                {{/InboundMessageTest.Message.Proof.Data.Keys}}
                ], vec![
                {{#InboundMessageTest.Message.Proof.Data.Values}}
                    hex!("{{.}}").to_vec(),
                {{/InboundMessageTest.Message.Proof.Data.Values}}
                ]),
            },
        },
    }
}
