//! Autogenerated weights for dot_app
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-11-24, STEPS: `50`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("spec.json"), DB CACHE: 128

// Executed Command:
// target/release/snowbridge
// benchmark
// --chain
// spec.json
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// dot_app
// --extra
// --extrinsic
// *
// --repeat
// 10
// --steps
// 50
// --output
// pallets/dot-app/src/weights.rs
// --template
// templates/module-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for dot_app.
pub trait WeightInfo {
	fn lock_basic_channel() -> Weight;
	fn lock_incentivized_channel() -> Weight;
	fn unlock() -> Weight;
}

/// Weights for dot_app using the Snowbridge node and recommended hardware.
pub struct SnowbridgeWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SnowbridgeWeight<T> {
	fn lock_basic_channel() -> Weight {
		Weight::from_ref_time(102_378_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	fn lock_incentivized_channel() -> Weight {
		Weight::from_ref_time(117_519_000 as u64)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	fn unlock() -> Weight {
		Weight::from_ref_time(59_937_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn lock_basic_channel() -> Weight {
		Weight::from_ref_time(102_378_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	fn lock_incentivized_channel() -> Weight {
		Weight::from_ref_time(117_519_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	fn unlock() -> Weight {
		Weight::from_ref_time(59_937_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
}
