//! Autogenerated weights for basic_channel_inbound
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-07, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("/tmp/snowbridge/spec.json"), DB CACHE: 1024

// Executed Command:
// target/release/snowbridge
// benchmark
// pallet
// --chain=/tmp/snowbridge/spec.json
// --execution=wasm
// --wasm-execution=compiled
// --pallet=basic_channel_inbound
// --extra
// --extrinsic=*
// --repeat=20
// --steps=50
// --output=pallets/basic-channel/src/inbound/weights.rs
// --template=templates/module-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for basic_channel_inbound.
pub trait WeightInfo {
    fn verify_message() -> Weight;
}

/// Weights for basic_channel_inbound using the Snowbridge node and recommended hardware.
pub struct SnowbridgeWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SnowbridgeWeight<T> {
    fn verify_message() -> Weight {
        Weight::from_ref_time(13_347_000 as u64)
            .saturating_add(T::DbWeight::get().reads(1 as u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn verify_message() -> Weight {
        Weight::from_ref_time(13_347_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
    }
}
