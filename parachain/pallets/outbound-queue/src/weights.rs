//! Autogenerated weights for basic_channel::outbound
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-11-25, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("spec.json"), DB CACHE: 128

// Executed Command:
// target/release/snowbridge
// benchmark
// --chain
// spec.json
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// basic_channel::outbound
// --extra
// --extrinsic
// *
// --repeat
// 20
// --steps
// 50
// --output
// pallets/basic-channel/src/outbound/weights.rs
// --template
// templates/module-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn do_process_message() -> Weight;
	fn on_finalize() -> Weight;
}

pub struct SnowbridgeWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SnowbridgeWeight<T> {
	fn do_process_message() -> Weight {
		Weight::from_parts(100_000_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2))
	}
	fn on_finalize() -> Weight {
		Weight::from_parts(100_000_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2))
	}
}

impl WeightInfo for () {
	fn do_process_message() -> Weight {
		Weight::from_parts(100_u64, 100)
	}
	fn on_finalize() -> Weight {
		Weight::from_parts(100_u64, 100)
	}
}
