// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: 2023 Snowfork <hello@snowfork.com>
use super::*;

use frame_benchmarking::v2::*;
use crate::Pallet as InboundQueue;
use frame_system::RawOrigin;
use snowbridge_beacon_primitives::CompactExecutionHeader;

#[benchmarks]
mod benchmarks {
    use snowbridge_core::Proof;
    use super::*;
    use hex_literal::hex;
    use sp_core::H256;

    #[benchmark]
    fn submit() -> Result<(), BenchmarkError> {
        let caller: T::AccountId = whitelisted_caller();

        let payload = hex!("f9011c94ee9170abfbf9421ad6dd07f6bdec9d89f2b581e0f863a01b11dcf133cc240f682dab2d3a8e4cd35c5da8c9cf99adac4336f8512584c5ada000000000000000000000000000000000000000000000000000000000000003e8a00000000000000000000000000000000000000000000000000000000000000001b8a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004b000f000000000000000100d184c103f7acc340847eee82a0b909e3358bc28d440edffa1352b13227e8ee646f3ea37456dec701345772617070656420457468657210574554481235003511000000000000000000000000000000000000000000");

        let execution_header = CompactExecutionHeader{
            parent_hash: hex!("93a72ceae4c8af8f4438784980d3f57c7a149495a5a49e0be9a6dffabc10de6e").into(),
            block_number: 42,
            state_root: hex!("9798febbce70182a623475afced52b6809e5d6a6d3dfe4a8c2d4bffec72f29bf").into(),
            receipts_root: hex!("113d2f9760141c1a13e0d6fecca13f84b8aec0b88e05cb53923441aa51fbdbff").into(),
        };
        let block_hash: H256 = hex!("f4a8647b907dca350b62f39c39bf61c89b2032d586aff486b7c628259772820f").into();

        T::Verifier::initialize_storage(block_hash, execution_header);

        let message = Message {
            data: payload.into(),
            proof: Proof {
                block_hash,
                tx_index: 0,
                data: (vec![hex!("113d2f9760141c1a13e0d6fecca13f84b8aec0b88e05cb53923441aa51fbdbff").to_vec()], vec![hex!("f9030a822080b9030402f90300018301d6e2b9010000000000000800000000000020040008000000000000000000000000400000008000000000000000000000000000000000000000000000000000000000042010000000001000000000000000000000000000000000040000000000000000000000000000000000000000000000008000000000000000002000000000000000000000000200000000000000200000000000100000000040000001000200008000000000000200000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000f901f5f87a942ffa5ecdbe006d30397c7636d3e015eee251369ff842a0c965575a00553e094ca7c5d14f02e107c258dda06867cbf9e0e69f80e71bbcc1a000000000000000000000000000000000000000000000000000000000000003e8a000000000000000000000000000000000000000000000000000000000000003e8f9011c94ee9170abfbf9421ad6dd07f6bdec9d89f2b581e0f863a01b11dcf133cc240f682dab2d3a8e4cd35c5da8c9cf99adac4336f8512584c5ada000000000000000000000000000000000000000000000000000000000000003e8a00000000000000000000000000000000000000000000000000000000000000001b8a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004b000f000000000000000100d184c103f7acc340847eee82a0b909e3358bc28d440edffa1352b13227e8ee646f3ea37456dec701345772617070656420457468657210574554481235003511000000000000000000000000000000000000000000f858948cf6147918a5cbb672703f879f385036f8793a24e1a01449abf21e49fd025f33495e77f7b1461caefdd3d4bb646424a3f445c4576a5ba0000000000000000000000000440edffa1352b13227e8ee646f3ea37456dec701").to_vec()]),
            },
        };

        let al: Vec<H160> = vec![hex!("ee9170abfbf9421ad6dd07f6bdec9d89f2b581e0").into()];
        let allowlist: BoundedBTreeSet<H160, T::AllowListLength> =
            BTreeSet::from_iter(al.clone().into_iter())
                .try_into()
                .expect("exceeded bound");
        <AllowList<T>>::put(allowlist);

        #[block]
        {
            let _= InboundQueue::<T>::submit(RawOrigin::Signed(caller.clone()).into(), message)?;
        }

        Ok(())
    }

    impl_benchmark_test_suite!(InboundQueue, crate::test::new_tester(hex!("ee9170abfbf9421ad6dd07f6bdec9d89f2b581e0").into()), crate::test::Test);
}
