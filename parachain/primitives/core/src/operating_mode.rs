use codec::{Decode, Encode, FullCodec, MaxEncodedLen};
use frame_support::{
	dispatch::DispatchResult, traits::EnsureOrigin, PalletError, RuntimeDebug, StorageValue,
};
use scale_info::TypeInfo;
use sp_std::fmt::Debug;

/// Error generated by the `OwnedBridgeModule` trait.
#[derive(Encode, Decode, TypeInfo, PalletError)]
pub enum OperatingModeError {
	/// All pallet operations are halted.
	Halted,
}

/// Operating mode for a bridge module.
pub trait OperatingModeTrait: Send + Copy + Debug + FullCodec {
	// Returns true if the bridge module is halted.
	fn is_halted(&self) -> bool;
}

/// Basic operating modes for a bridges module (Normal/Halted).
#[derive(
	Encode,
	Decode,
	Clone,
	Copy,
	PartialEq,
	Eq,
	RuntimeDebug,
	TypeInfo,
	MaxEncodedLen,
	serde::Serialize,
	serde::Deserialize,
)]
pub enum OperatingMode {
	/// Normal mode, when all operations are allowed.
	Normal,
	/// The pallet is halted. All operations (except operating mode change) are prohibited.
	Halted,
}

impl Default for OperatingMode {
	fn default() -> Self {
		Self::Normal
	}
}

impl OperatingModeTrait for OperatingMode {
	fn is_halted(&self) -> bool {
		*self == OperatingMode::Halted
	}
}

/// Bridge module with operating mode
pub trait BridgeModule<T: frame_system::Config> {
	type OperatingMode: OperatingModeTrait;
	type OperatingModeStorage: StorageValue<Self::OperatingMode, Query = Self::OperatingMode>;
	type AllowedHaltOrigin: EnsureOrigin<T::RuntimeOrigin>;

	/// Check if the module is halted.
	fn is_halted() -> bool {
		Self::OperatingModeStorage::get().is_halted()
	}

	/// Ensure that the module is not halted.
	fn ensure_not_halted() -> Result<(), OperatingModeError> {
		match Self::is_halted() {
			true => Err(OperatingModeError::Halted),
			false => Ok(()),
		}
	}

	/// Halt or resume all/some module operations.
	fn set_operating_mode(
		origin: T::RuntimeOrigin,
		operating_mode: Self::OperatingMode,
	) -> DispatchResult {
		Self::AllowedHaltOrigin::ensure_origin(origin)?;
		Self::OperatingModeStorage::put(operating_mode);
		Ok(())
	}
}
